package com.scb.paymentinitiation.createpayroll.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "payroll_batches")
public class PayrollBatch {

    @Id
    private Long id;

    @Embedded
    private Instruction instruction;

    @ElementCollection
    @CollectionTable(name = "payments", joinColumns = @JoinColumn(name = "batch_id"))
    private List<Payment> payments;

    private String status;
    private String createdAt;
    private String updatedAt;

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Instruction getInstruction() { return instruction; }
    public void setInstruction(Instruction instruction) { this.instruction = instruction; }

    public List<Payment> getPayments() { return payments; }
    public void setPayments(List<Payment> payments) { this.payments = payments; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public String getCreatedAt() { return createdAt; }
    public void setCreatedAt(String createdAt) { this.createdAt = createdAt; }

    public String getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(String updatedAt) { this.updatedAt = updatedAt; }
}
////////////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.createpayroll.model;

import jakarta.persistence.Embeddable;

@Embeddable
public class Instruction {
    private String paymentCurrency;
    private String debitAccount;
    private String date;

    // Getters & Setters
    public String getPaymentCurrency() { return paymentCurrency; }
    public void setPaymentCurrency(String paymentCurrency) { this.paymentCurrency = paymentCurrency; }

    public String getDebitAccount() { return debitAccount; }
    public void setDebitAccount(String debitAccount) { this.debitAccount = debitAccount; }

    public String getDate() { return date; }
    public void setDate(String date) { this.date = date; }
}
//////////////////////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.createpayroll.model;

import jakarta.persistence.Embeddable;

@Embeddable
public class Payment {
    private String payeeRole;
    private String payeeName;
    private String accountNumber;
    private String reference;
    private String amount;

    // Getters & Setters
    public String getPayeeRole() { return payeeRole; }
    public void setPayeeRole(String payeeRole) { this.payeeRole = payeeRole; }

    public String getPayeeName() { return payeeName; }
    public void setPayeeName(String payeeName) { this.payeeName = payeeName; }

    public String getAccountNumber() { return accountNumber; }
    public void setAccountNumber(String accountNumber) { this.accountNumber = accountNumber; }

    public String getReference() { return reference; }
    public void setReference(String reference) { this.reference = reference; }

    public String getAmount() { return amount; }
    public void setAmount(String amount) { this.amount = amount; }
}
/////////////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.createpayroll.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.scb.paymentinitiation.createpayroll.model.PayrollBatch;

@Repository
public interface PayrollBatchRepository extends JpaRepository<PayrollBatch, Long> { }
/////////////////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.createpayroll.service;

import com.scb.paymentinitiation.createpayroll.model.PayrollBatch;
import com.scb.paymentinitiation.createpayroll.repository.PayrollBatchRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PayrollService {

    private final PayrollBatchRepository repository;

    public PayrollService(PayrollBatchRepository repository) {
        this.repository = repository;
    }

    public PayrollBatch saveBatch(PayrollBatch batch) {
        return repository.save(batch);
    }

    public List<PayrollBatch> getAllBatches() {
        return repository.findAll();
    }

    public PayrollBatch getBatchById(Long id) {
        return repository.findById(id).orElse(null);
    }
}
//////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.createpayroll.controller;

import com.scb.paymentinitiation.createpayroll.model.PayrollBatch;
import com.scb.paymentinitiation.createpayroll.service.PayrollService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/payroll")
@CrossOrigin(origins = "http://localhost:3000")
public class PayrollController {

    private final PayrollService service;

    public PayrollController(PayrollService service) {
        this.service = service;
    }

    @PostMapping("/batch")
    public PayrollBatch saveOrSubmitBatch(@RequestBody PayrollBatch batch) {
        return service.saveBatch(batch);
    }

    @GetMapping("/batch")
    public List<PayrollBatch> getAllBatches() {
        return service.getAllBatches();
    }

    @GetMapping("/batch/{id}")
    public PayrollBatch getBatchById(@PathVariable Long id) {
        return service.getBatchById(id);
    }
}
/////////////////////////////////////////////////////////////////////////////
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import PrimaryButton from "../../common/components/PrimaryButton";

const BASE_URL = "http://localhost:8080/api/payroll";

export default function ManagePayroll() {
  const navigate = useNavigate();
  const [batches, setBatches] = useState([]);

  // Fetch all batches
  const fetchBatches = async () => {
    try {
      const res = await axios.get(`${BASE_URL}/batch`);
      setBatches(res.data);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchBatches();
  }, []);

  // Delete a batch
  const deleteBatch = async (id) => {
    try {
      await axios.delete(`${BASE_URL}/batch/${id}`);
      fetchBatches(); // refresh after delete
    } catch (error) {
      console.error(error);
    }
  };

  // Navigate to edit page
  const editBatch = (batch) => {
    navigate("/payroll-payment", { state: { batch } });
  };

  return (
    <div className="container p-2">
      <div className="card p-3">
        <h2 className="text-center mb-3">Manage Payroll</h2>

        <table className="table table-bordered text-center">
          <thead className="table-light">
            <tr>
              <th>S. No.</th>
              <th>Debit Account</th>
              <th>Currency</th>
              <th>Date</th>
              <th>Status</th>
              <th>Total Amount</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {batches.map((batch, index) => {
              const totalAmount = batch.payments?.reduce(
                (sum, p) => sum + Number(p.amount || 0),
                0
              );
              return (
                <tr key={batch.id}>
                  <td>{index + 1}</td>
                  <td>{batch.instruction?.debitAccount}</td>
                  <td>{batch.instruction?.paymentCurrency}</td>
                  <td>{batch.instruction?.date}</td>
                  <td>{batch.status}</td>
                  <td className="text-end">{totalAmount}</td>
                  <td>
                    <button
                      className="btn btn-sm btn-primary me-1"
                      onClick={() => editBatch(batch)}
                    >
                      Edit
                    </button>
                    <button
                      className="btn btn-sm btn-danger"
                      onClick={() => deleteBatch(batch.id)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>

        <div className="text-end mt-3">
          <PrimaryButton onClick={() => navigate("/payroll-payment")}>
            + Create New Payroll
          </PrimaryButton>
        </div>
      </div>
    </div>
  );
}
