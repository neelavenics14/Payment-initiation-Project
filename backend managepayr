package com.scb.paymentinitiation.managepayroll.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "payroll_batches")  // same table as CreatePayroll
public class ManagePayrollBatch {

    @Id
    private Long id;

    @Embedded
    private Instruction instruction;

    @ElementCollection
    @CollectionTable(name = "payments", joinColumns = @JoinColumn(name = "batch_id"))
    private List<Payment> payments;

    private String status;
    private String createdAt;
    private String updatedAt;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Instruction getInstruction() { return instruction; }
    public void setInstruction(Instruction instruction) { this.instruction = instruction; }

    public List<Payment> getPayments() { return payments; }
    public void setPayments(List<Payment> payments) { this.payments = payments; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public String getCreatedAt() { return createdAt; }
    public void setCreatedAt(String createdAt) { this.createdAt = createdAt; }

    public String getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(String updatedAt) { this.updatedAt = updatedAt; }
}
/////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.managepayroll.model;

import jakarta.persistence.Embeddable;

@Embeddable
public class Instruction {
    private String paymentCurrency;
    private String debitAccount;
    private String date;

    public String getPaymentCurrency() { return paymentCurrency; }
    public void setPaymentCurrency(String paymentCurrency) { this.paymentCurrency = paymentCurrency; }

    public String getDebitAccount() { return debitAccount; }
    public void setDebitAccount(String debitAccount) { this.debitAccount = debitAccount; }

    public String getDate() { return date; }
    public void setDate(String date) { this.date = date; }
}
//////////////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.managepayroll.model;

import jakarta.persistence.Embeddable;

@Embeddable
public class Payment {
    private String payeeDetails;
    private String payeeName;
    private String accountNumber;
    private String reference;
    private String amount;

    public String getPayeeDetails() { return payeeDetails; }
    public void setPayeeDetails(String payeeDetails) { this.payeeDetails = payeeDetails; }

    public String getPayeeName() { return payeeName; }
    public void setPayeeName(String payeeName) { this.payeeName = payeeName; }

    public String getAccountNumber() { return accountNumber; }
    public void setAccountNumber(String accountNumber) { this.accountNumber = accountNumber; }

    public String getReference() { return reference; }
    public void setReference(String reference) { this.reference = reference; }

    public String getAmount() { return amount; }
    public void setAmount(String amount) { this.amount = amount; }
}
//////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.managepayroll.repository;

import com.scb.paymentinitiation.managepayroll.model.ManagePayrollBatch;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ManagePayrollRepository extends JpaRepository<ManagePayrollBatch, Long> {
}
////////////////////////////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.managepayroll.service;

import com.scb.paymentinitiation.managepayroll.model.ManagePayrollBatch;
import com.scb.paymentinitiation.managepayroll.repository.ManagePayrollRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ManagePayrollService {

    private final ManagePayrollRepository repository;

    public ManagePayrollService(ManagePayrollRepository repository) {
        this.repository = repository;
    }

    public List<ManagePayrollBatch> getAllBatches() {
        return repository.findAll();
    }

    public ManagePayrollBatch getBatchById(Long id) {
        return repository.findById(id).orElse(null);
    }

    public ManagePayrollBatch saveBatch(ManagePayrollBatch batch) {
        return repository.save(batch);
    }

    public ManagePayrollBatch updateBatch(Long id, ManagePayrollBatch updatedBatch) {
        return repository.findById(id).map(batch -> {
            batch.setInstruction(updatedBatch.getInstruction());
            batch.setPayments(updatedBatch.getPayments());
            batch.setStatus(updatedBatch.getStatus());
            batch.setUpdatedAt(updatedBatch.getUpdatedAt());
            return repository.save(batch);
        }).orElse(null);
    }

    public void deleteBatch(Long id) {
        repository.deleteById(id);
    }
}
///////////////////////////////////////////////////////////////
package com.scb.paymentinitiation.managepayroll.controller;

import com.scb.paymentinitiation.managepayroll.model.ManagePayrollBatch;
import com.scb.paymentinitiation.managepayroll.service.ManagePayrollService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/manage-payroll")
@CrossOrigin(origins = "http://localhost:3000") // allow React
public class ManagePayrollController {

    private final ManagePayrollService service;

    public ManagePayrollController(ManagePayrollService service) {
        this.service = service;
    }

    @GetMapping("/batch")
    public List<ManagePayrollBatch> getAll() {
        return service.getAllBatches();
    }

    @GetMapping("/batch/{id}")
    public ManagePayrollBatch getById(@PathVariable Long id) {
        return service.getBatchById(id);
    }

    @PostMapping("/batch")
    public ManagePayrollBatch create(@RequestBody ManagePayrollBatch batch) {
        return service.saveBatch(batch);
    }

    @PutMapping("/batch/{id}")
    public ManagePayrollBatch update(@PathVariable Long id, @RequestBody ManagePayrollBatch batch) {
        return service.updateBatch(id, batch);
    }

    @DeleteMapping("/batch/{id}")
    public void delete(@PathVariable Long id) {
        service.deleteBatch(id);
    }
}
