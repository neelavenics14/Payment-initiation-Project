import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import PrimaryButton from "../../common/components/PrimaryButton";

const BASE_URL = "http://localhost:8080/api/payroll";

export default function PayrollPayment() {
  const navigate = useNavigate();

  const [instruction, setInstruction] = useState({
    paymentCurrency: "",
    debitAccount: "",
    date: "",
  });

  const [payments, setPayments] = useState([
    {
      payeeDetails: "",
      payeeName: "",
      accountNumber: "",
      reference: `REF-${Date.now()}`,
      amount: "",
    },
  ]);

  const handleInstructionChange = (e) => {
    const { name, value } = e.target;
    setInstruction((prev) => ({ ...prev, [name]: value }));
  };

  const handlePaymentChange = (index, e) => {
    const { name, value } = e.target;
    setPayments((prev) => {
      const updated = [...prev];
      updated[index][name] = value;
      return updated;
    });
  };

  const addPaymentRow = () => {
    setPayments((prev) => [
      ...prev,
      {
        payeeDetails: "",
        payeeName: "",
        accountNumber: "",
        reference: `REF-${Date.now()}`,
        amount: "",
      },
    ]);
  };

  const removePaymentRow = (index) => {
    setPayments((prev) => prev.filter((_, i) => i !== index));
  };

  const saveBatch = async (status) => {
    const batch = {
      instruction,
      payments,
      status,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    try {
      await axios.post(`${BASE_URL}/batch`, batch);
      alert(`Batch ${status} successfully!`);
      navigate("/managepayroll"); // go back to ManagePayroll
    } catch (error) {
      console.error(error);
      alert("Failed to save batch. Check console for details.");
    }
  };

  const totalAmount = payments.reduce(
    (sum, p) => sum + (Number(p.amount) || 0),
    0
  );

  return (
    <div className="container p-2">
      <div className="card p-3">
        <h2 className="text-center mb-3">Create Payroll Payments</h2>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            saveBatch("Submitted");
          }}
        >
          {/* Instruction Details */}
          <h4>Instruction Details</h4>
          <div className="row mb-3">
            <div className="col">
              <label>Debit Account *</label>
              <select
                name="debitAccount"
                value={instruction.debitAccount}
                onChange={handleInstructionChange}
                className="form-select"
                required
              >
                <option value="">Select Debit Account</option>
                <option value="Corporate INR">Corporate INR</option>
                <option value="Corporate USD">Corporate USD</option>
              </select>
            </div>

            <div className="col">
              <label>Currency *</label>
              <select
                name="paymentCurrency"
                value={instruction.paymentCurrency}
                onChange={handleInstructionChange}
                className="form-select"
                required
              >
                <option value="">Select Currency</option>
                <option value="INR">INR</option>
                <option value="USD">USD</option>
              </select>
            </div>

            <div className="col">
              <label>Date *</label>
              <input
                type="date"
                name="date"
                value={instruction.date}
                onChange={handleInstructionChange}
                className="form-control"
                required
              />
            </div>
          </div>

          {/* Payment Details */}
          <h4>Payment Details</h4>
          <table className="table table-bordered text-center mb-0">
            <thead className="table-light">
              <tr>
                <th>S. No.</th>
                <th>Reference</th>
                <th>Payee Role</th>
                <th>Payee Name</th>
                <th>Account Number</th>
                <th>Amount</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              {payments.map((p, i) => (
                <tr key={i}>
                  <td>{i + 1}</td>
                  <td>
                    <input
                      className="form-control form-control-sm"
                      name="reference"
                      value={p.reference}
                      readOnly
                    />
                  </td>
                  <td>
                    <input
                      className="form-control form-control-sm"
                      name="payeeDetails"
                      value={p.payeeDetails}
                      onChange={(e) => handlePaymentChange(i, e)}
                      required
                    />
                  </td>
                  <td>
                    <input
                      className="form-control form-control-sm"
                      name="payeeName"
                      value={p.payeeName}
                      onChange={(e) => handlePaymentChange(i, e)}
                      required
                    />
                  </td>
                  <td>
                    <input
                      className="form-control form-control-sm"
                      name="accountNumber"
                      value={p.accountNumber}
                      onChange={(e) => handlePaymentChange(i, e)}
                      required
                    />
                  </td>
                  <td>
                    <input
                      className="form-control form-control-sm"
                      type="number"
                      name="amount"
                      value={p.amount}
                      onChange={(e) => handlePaymentChange(i, e)}
                      required
                    />
                  </td>
                  <td>
                    <button
                      type="button"
                      className="btn btn-sm btn-danger"
                      onClick={() => removePaymentRow(i)}
                    >
                      Remove
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Total Amount */}
          <div style={{ textAlign: "right", marginTop: "10px" }}>
            <strong>Total Amount: {totalAmount}</strong>
          </div>

          {/* Buttons */}
          <div className="d-flex justify-content-between align-items-center my-2">
            <button
              type="button"
              className="btn btn-outline-secondary"
              onClick={addPaymentRow}
            >
              + Add Payment Row
            </button>
            <div className="d-flex gap-2">
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={() => saveBatch("Draft")}
              >
                Save as Draft
              </button>
              <PrimaryButton type="submit">Submit</PrimaryButton>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}
