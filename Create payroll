import React, { useState, useEffect } from "react";
import axios from "axios";
import PrimaryButton from "../../common/components/PrimaryButton";

const BASE_URL = "http://localhost:8080/api/payroll";

export default function PayrollPayment({ addNewBatch, updateBatch, editBatchData }) {
  const [instruction, setInstruction] = useState({
    paymentCurrency: "",
    debitAccount: "",
    date: "",
  });

  const [payments, setPayments] = useState([
    {
      payeeDetails: "",
      payeeName: "",
      accountNumber: "",
      reference: `REF-${Date.now()}`,
      amount: "",
    },
  ]);

  // Load batch if editing
  useEffect(() => {
    if (editBatchData) {
      setInstruction(editBatchData.instruction || {});
      setPayments(editBatchData.payments || []);
    }
  }, [editBatchData]);

  const handleInstructionChange = (e) => {
    const { name, value } = e.target;
    setInstruction((prev) => ({ ...prev, [name]: value }));
  };

  const handlePaymentChange = (index, e) => {
    const { name, value } = e.target;
    setPayments((prev) => {
      const updated = [...prev];
      updated[index][name] = name === "amount" ? value.replace(/[^0-9]/g, "") : value;
      return updated;
    });
  };

  const addPaymentRow = () => {
    setPayments((prev) => [
      ...prev,
      {
        payeeDetails: "",
        payeeName: "",
        accountNumber: "",
        reference: `REF-${Date.now()}`,
        amount: "",
      },
    ]);
  };

  const removePaymentRow = (index) => {
    setPayments((prev) => prev.filter((_, i) => i !== index));
  };

  const saveBatch = async (status) => {
    const batch = {
      instruction,
      payments,
      status,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    try {
      let res;
      if (editBatchData) {
        // Update existing
        res = await axios.put(`${BASE_URL}/batch/${editBatchData.id}`, batch);
        if (updateBatch) updateBatch(res.data);
      } else {
        // Create new
        res = await axios.post(`${BASE_URL}/batch`, batch);
        if (addNewBatch) addNewBatch(res.data);
      }

      alert(`Batch ${status} successfully!`);

      if (!editBatchData) {
        setInstruction({ paymentCurrency: "", debitAccount: "", date: "" });
        setPayments([
          {
            payeeDetails: "",
            payeeName: "",
            accountNumber: "",
            reference: `REF-${Date.now()}`,
            amount: "",
          },
        ]);
      }
    } catch (error) {
      console.error(error);
      alert("Failed to save batch. Check console for details.");
    }
  };

  const totalAmount = payments.reduce((sum, p) => sum + (Number(p.amount) || 0), 0);

  return (
    <div className="container p-2">
      <div className="card p-3">
        <h2 className="text-center mb-3">
          {editBatchData ? "Edit Payroll Batch" : "Create Payroll Payments"}
        </h2>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            saveBatch("Submitted");
          }}
        >
          {/* Instruction Details */}
          <h4>Instruction Details</h4>
          <div className="row mb-3">
            <div className="col">
              <label>Debit Account *</label>
              <select
                name="debitAccount"
                value={instruction.debitAccount}
                onChange={handleInstructionChange}
                className="form-select"
                required
              >
                <option value="">Select Debit Account</option>
                <option value="Corporate INR">Corporate INR</option>
                <option value="Corporate USD">Corporate USD</option>
              </select>
            </div>

            <div className="col">
              <label>Currency *</label>
              <select
                name="paymentCurrency"
                value={instruction.paymentCurrency}
                onChange={handleInstructionChange}
                className="form-select"
                required
              >
                <option value="">Select Currency</option>
                <option value="INR">INR</option>
                <option value="USD">USD</option>
              </select>
            </div>

            <div className="col">
              <label>Date *</label>
              <input
                type="date"
                name="date"
                value={instruction.date}
                onChange={handleInstructionChange}
                className="form-control"
                required
              />
            </div>
          </div>

          {/* Payment Details */}
          <h4 className="d-flex justify-content-between">
            <span>Payment Details</span>
          </h4>

          <div style={{ maxHeight: "300px", overflowY: "auto", border: "1px solid #ccc", borderRadius: "5px" }}>
            <table className="table table-bordered text-center mb-0">
              <thead className="table-light" style={{ position: "sticky", top: 0, zIndex: 1 }}>
                <tr>
                  <th>S. No.</th>
                  <th>Reference</th>
                  <th>Payee Role</th>
                  <th>Payee Name</th>
                  <th>Account Number</th>
                  <th>Amount</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {payments.map((p, i) => (
                  <tr key={i}>
                    <td>{i + 1}</td>
                    <td>
                      <input className="form-control form-control-sm" name="reference" value={p.reference} readOnly />
                    </td>
                    <td>
                      <input className="form-control form-control-sm" name="payeeDetails" value={p.payeeDetails} onChange={(e) => handlePaymentChange(i, e)} required />
                    </td>
                    <td>
                      <input className="form-control form-control-sm" name="payeeName" value={p.payeeName} onChange={(e) => handlePaymentChange(i, e)} required />
                    </td>
                    <td>
                      <input className="form-control form-control-sm" name="accountNumber" value={p.accountNumber} onChange={(e) => handlePaymentChange(i, e)} required />
                    </td>
                    <td>
                      <input className="form-control form-control-sm text-end" type="text" name="amount" value={p.amount} onChange={(e) => handlePaymentChange(i, e)} required />
                    </td>
                    <td>
                      <button type="button" className="btn btn-sm btn-danger" onClick={() => removePaymentRow(i)}>
                        Remove
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Total Amount */}
          <div style={{ textAlign: "right", marginTop: "5px" }}>
            <strong>Total Amount: {totalAmount.toLocaleString()}</strong>
          </div>

          {/* Buttons */}
          <div className="d-flex justify-content-between align-items-center my-2">
            <button type="button" className="btn btn-outline-secondary my-2" onClick={addPaymentRow}>
              + Add Payment Row
            </button>
            <div className="d-flex gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={() => saveBatch("Draft")}>
                Save as Draft
              </button>
              <PrimaryButton type="submit">Submit</PrimaryButton>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}
